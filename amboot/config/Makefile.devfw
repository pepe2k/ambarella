##
## amboot/config/Makefile.devfw
##
## History:
##    2005/02/27 - [Charles Chiou] created file
##    2007/10/11 - [Charles Chiou] added PBA partition
##    2007/11/27 - [Charles Chiou] added echo supression
##    2008/11/18 - [Charles Chiou] added HAL and SEC partitions
##    2009/10/28 - [Chien-Yang Chen] added LNX partitions
##    2010/12/23 - [Cao Rongrong] added SWP, ADD and ADC partitions
##
## Copyright (C) 2004-2007, Ambarella, Inc.
##
## All rights reserved. No Part of this file may be reproduced, stored
## in a retrieval system, or transmitted, in any form, or by any means,
## electronic, mechanical, photocopying, recording, or otherwise,
## without the prior consent of Ambarella, Inc.
##

# Requirements:
#	(1) Please define the following before including this Makefile,
#	$(HOST_OS)
#	$(TOP)
#	$(BSP)
#	$(CROSS) and all the compilation tool variables.
#
#	(2) Define the following variables to point to the file locations of
#	the payload of firmwares.
#	$(KERNEL)
#	$(RAMDISK)
#	$(ROMFS)
#	$(DSP)

ifeq ($(BUILD_DEVFW),y)

ifndef DATE
DATE :=			$(shell date +%Y%m%d)
endif

YEAR :=			$(shell date +%Y | sed s/^0//)
MONTH :=		$(shell date +%m | sed s/^0//)
DAY :=			$(shell date +%d | sed s/^0//)

# Because of the quoted string format that Kconfig uses, we need to
# destringify the following variables before processing them:
HAL :=			$(shell echo $(HAL))
HAL_VIF :=		$(shell echo $(HAL_VIF))
PBA :=			$(shell echo $(PBA))
PBA_VIF :=		$(shell echo $(PBA_VIF))
KERNEL :=		$(shell echo $(KERNEL))
KERNEL_VIF :=		$(shell echo $(KERNEL_VIF))
SECONDARY :=		$(shell echo $(SECONDARY))
SECONDARY_VIF :=	$(shell echo $(SECONDARY_VIF))
BACKUP :=		$(shell echo $(BACKUP))
BACKUP_VIF :=		$(shell echo $(BACKUP_VIF))
RAMDISK :=		$(shell echo $(RAMDISK))
RAMDISK_VIF :=		$(shell echo $(RAMDISK_VIF))
ROMFS :=		$(shell echo $(ROMFS))
ROMFS_VIF :=		$(shell echo $(ROMFS_VIF))
DSP :=			$(shell echo $(DSP))

ifneq ($(DSP_CODE_IMG),)
DSP_CODE_IMG :=		$(shell echo $(DSP_CODE_IMG))
endif
ifneq ($(DSP_MEMD_IMG),)
DSP_MEMD_IMG :=		$(shell echo $(DSP_MEMD_IMG))
endif
ifneq ($(DSP_MAIN_IMG),)
DSP_MAIN_IMG :=		$(shell echo $(DSP_MAIN_IMG))
endif
ifneq ($(DSP_SUB0_IMG),)
DSP_SUB0_IMG :=		$(shell echo $(DSP_SUB0_IMG))
endif
ifneq ($(DSP_SUB1_IMG),)
DSP_SUB1_IMG :=		$(shell echo $(DSP_SUB1_IMG))
endif
ifneq ($(DSP_DATA_IMG),)
DSP_DATA_IMG :=		$(shell echo $(DSP_DATA_IMG))
endif
ifneq ($(DSP_AORC_IMG),)
DSP_AORC_IMG :=       	$(shell echo $(DSP_AORC_IMG))
endif

DSP_VIF :=		$(shell echo $(DSP_VIF))

LNX :=			$(shell echo $(LNX))
LNX_VIF :=		$(shell echo $(LNX_VIF))

SWP :=			$(shell echo $(SWP))
SWP_VIF :=		$(shell echo $(SWP_VIF))

ADD :=			$(shell echo $(ADD))
ADD_VIF :=		$(shell echo $(ADD_VIF))

ADC :=			$(shell echo $(ADC))
ADC_VIF :=		$(shell echo $(ADC_VIF))

HOST_PERMUTATE_ARG =	amboot

ifneq ($(HAL),)
ifeq ($(wildcard $(HAL)),$(HAL))
__HAS_HAL__ = 1
HOST_PERMUTATE_ARG +=	hal
endif
endif

ifneq ($(PBA),)
ifeq ($(wildcard $(PBA)),$(PBA))
__HAS_PBA__ = 1
HOST_PERMUTATE_ARG +=	pba
endif
endif

ifneq ($(KERNEL),)
ifeq ($(wildcard $(KERNEL)),$(KERNEL))
__HAS_KERNEL__ = 1
HOST_PERMUTATE_ARG +=	kernel
endif
endif

ifneq ($(SECONDARY),)
ifeq ($(wildcard $(SECONDARY)),$(SECONDARY))
__HAS_SECONDARY__ = 1
HOST_PERMUTATE_ARG +=	secondary
endif
endif

ifneq ($(BACKUP),)
ifeq ($(wildcard $(BACKUP)),$(BACKUP))
__HAS_BACKUP__ = 1
HOST_PERMUTATE_ARG +=	backup
endif
endif

ifneq ($(RAMDISK),)
ifeq ($(wildcard $(RAMDISK)),$(RAMDISK))
__HAS_RAMDISK__ = 1
HOST_PERMUTATE_ARG +=	ramdisk
endif
endif

ifneq ($(CREATE_ROMFS_FW),)
__HAS_ROMFS__ = 1
HOST_PERMUTATE_ARG +=	romfs
else
ifneq ($(ROMFS),)
ifeq ($(wildcard $(ROMFS)),$(ROMFS))
__HAS_ROMFS__ = 1
HOST_PERMUTATE_ARG +=	romfs
endif
endif
endif

ifneq ($(CREATE_DSP_FW),)
__HAS_DSP__ = 1
HOST_PERMUTATE_ARG +=	dsp
else
ifneq ($(DSP),)
ifeq ($(wildcard $(DSP)),$(DSP))
__HAS_DSP__ = 1
HOST_PERMUTATE_ARG +=	dsp
endif
endif
endif

ifneq ($(LNX),)
ifeq ($(wildcard $(LNX)),$(LNX))
__HAS_LNX__ = 1
HOST_PERMUTATE_ARG +=	lnx
endif
endif

ifneq ($(SWP),)
ifeq ($(wildcard $(SWP)),$(SWP))
__HAS_SWP__ = 1
HOST_PERMUTATE_ARG +=	swp
endif
endif

ifneq ($(ADD),)
ifeq ($(wildcard $(ADD)),$(ADD))
__HAS_ADD__ = 1
HOST_PERMUTATE_ARG +=	add
endif
endif

ifneq ($(ADC),)
ifeq ($(wildcard $(ADC)),$(ADC))
__HAS_ADC__ = 1
HOST_PERMUTATE_ARG +=	adc
endif
endif

ifeq (.fwlist,$(wildcard .fwlist))
include .fwlist
FIRMWARES :=	$(foreach i,$(FIRMWARES),devfw/$i)
endif

#
# If build prom firmware, prom_*.bin is used to replace amboot_bst_*.bin
# and should be programed into PROM.
#
ifeq ($(BUILD_AMBPROM),y)
BST_DEBUG = prom_fw_debug
BST_RELEASE = prom_fw_release
BST_PIGGY = src/prom/piggy_prom.S
BST_VIF = src/prom/version.info
else
BST_DEBUG = amboot_bst_debug
BST_RELEASE = amboot_bst_release
BST_PIGGY = src/bld/piggy_amboot_bst.S
BST_VIF = src/bst/version.info
endif

PAYLOAD_DEBUG =	\
		.temp/$(BST_DEBUG).fw \
		.temp/amboot_bld_debug.fw \
		.temp/hal.fw \
		.temp/pba.fw \
		.temp/kernel.fw \
		.temp/secondary.fw \
		.temp/backup.fw \
		.temp/ramdisk.fw \
		.temp/romfs.fw \
		.temp/dsp.fw \
		.temp/lnx.fw \
		.temp/swp.fw \
		.temp/add.fw \
		.temp/adc.fw

PAYLOAD_RELEASE = \
		.temp/$(BST_RELEASE).fw \
		.temp/amboot_bld_release.fw \
		.temp/hal.fw \
		.temp/pba.fw \
		.temp/kernel.fw \
		.temp/secondary.fw \
		.temp/backup.fw \
		.temp/ramdisk.fw \
		.temp/romfs.fw \
		.temp/dsp.fw \
		.temp/lnx.fw \
		.temp/swp.fw \
		.temp/add.fw \
		.temp/adc.fw

DEVFW_DEBUG =	$(addsuffix _debug.efw,$(FIRMWARES)) \
		$(addsuffix _debug.bin,$(FIRMWARES))

DEVFW_RELEASE = $(addsuffix _release.efw,$(FIRMWARES)) \
		$(addsuffix _release.bin,$(FIRMWARES))

#DEVFW = $(DEVFW_DEBUG) $(DEVFW_RELEASE)
DEVFW = $(DEVFW_RELEASE)

MEMFWPROG_OBJS = \
		run_once.o \
		rtpll.o \
		mmu.o \
		armcache.o \
		cache.o \
		gpio.o \
		vic.o \
		util.o \
		memcpy.o \
		memzero.o \
		memcmp.o \
		crc32.o \
		timer.o \
		uart.o \
		nand.o \
		nand_bbt.o \
		onenand.o \
		nor.o \
		snor.o \
		sdmmc.o \
		sm.o \
		spi.o \
		firmfl.o \
		partition.o \
		memfwprog.o \
		$(NANDDB_OBJS)

ifeq ($(BUILD_AMBPROM),y)
MEMFWPROG_OBJS += \
		eeprom.o
endif

ifeq ($(wildcard $(BSP_DIR)/bsp_fw.c),$(BSP_DIR)/bsp_fw.c)
MEMFWPROG_OBJS += bsp_fw.o
endif

ifeq ($(wildcard $(BSP_DIR)/make.devfw),$(BSP_DIR)/make.devfw)
include $(BSP_DIR)/make.devfw
endif

MEMFWPROG_DEBUG_OBJS = $(patsubst %.o,%_debug.o,$(MEMFWPROG_OBJS))
MEMFWPROG_RELEASE_OBJS = $(patsubst %.o,%_release.o,$(MEMFWPROG_OBJS))

MEMFWPROG_DEBUG = $(addsuffix _debug.elf,$(subst devfw,memfwprog,$(FIRMWARES)))
MEMFWPROG_RELEASE = $(addsuffix _release.elf,$(subst devfw,memfwprog,$(FIRMWARES)))
MEMFWPROG_RELEASE_BIN = $(addsuffix _release.bin,$(subst devfw,memfwprog,$(FIRMWARES)))

MEMFWPROG = $(MEMFWPROG_RELEASE) $(MEMFWPROG_RELEASE_BIN)
ifeq ($(BUILD_DEBUG_MEMFWPROG),y)
MEMFWPROG += $(MEMFWPROG_DEBUG)
endif

# MEMFWPROG targets

memfwprog/%_debug.elf: .temp/header_%.fw $(PAYLOAD_DEBUG) \
		$(MEMFWPROG_DEBUG_OBJS) .temp/memfwprog/%.lds
	@mkdir -p memfwprog
	$(ECHO_LD) $(CROSS)$(CC) -Wl,-T,.temp/$(subst _debug.elf,.lds,$@) \
		-nostartfiles -o $@ $(MEMFWPROG_DEBUG_OBJS) $< \
		$(PAYLOAD_DEBUG) $(LINK_EXTERNAL_LIB)

memfwprog/%_release.elf: .temp/header_%.fw $(PAYLOAD_RELEASE) \
		$(MEMFWPROG_RELEASE_OBJS) .temp/memfwprog/%.lds
	@mkdir -p memfwprog
	$(ECHO_LD) $(CROSS)$(CC) -Wl,-T,.temp/$(subst _release.elf,.lds,$@) \
		-nostartfiles -o $@ $(MEMFWPROG_RELEASE_OBJS) $< \
		$(PAYLOAD_RELEASE) $(LINK_EXTERNAL_LIB)
	@$(CROSS)$(STRIP) --remove-section=.trash $@ 2> /dev/null

memfwprog/%.bin: memfwprog/%.elf
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -O binary $< $@

# DEVFW targets

devfw/%_debug.bin: .temp/devfw/%_debug.efw
	@mkdir -p devfw
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O binary $< $@

.temp/devfw/%_debug.efw: .temp/header_%.fw $(PAYLOAD_DEBUG) .temp/devfw/%.lds
	@mkdir -p .temp/devfw
	$(ECHO_LD) $(CROSS)$(LD) -T$(subst _debug.efw,.lds,$@) -o $@ \
		$< $(PAYLOAD_DEBUG)

devfw/%_release.bin: .temp/devfw/%_release.efw
	@mkdir -p devfw
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O binary $< $@

.temp/devfw/%_release.efw: .temp/header_%.fw $(PAYLOAD_RELEASE) .temp/devfw/%.lds
	@mkdir -p .temp
	$(ECHO_LD) $(CROSS)$(LD) -T$(subst _release.efw,.lds,$@) -o $@ \
		$< $(PAYLOAD_RELEASE)

# Object targets

.temp/header_%.fw: .temp/header_%.S partinfo.h
	@mkdir -p .temp
	$(ASM_NDEBUG_OBJ)

%_debug.o: $(TOP)/src/bld/%.S
	$(ASM_DEBUG_OBJ)

%_debug.o: $(TOP)/src/bld/%.c
	$(MAKE_DEBUG_OBJ)

%_release.o: $(TOP)/src/bld/%.S
	$(ASM_NDEBUG_OBJ)

%_release.o: $(TOP)/src/bld/%.c
	$(MAKE_NDEBUG_OBJ)

# Linker script targets

.temp/devfw/%.lds: $(TOP)/src/bld/devfw.lds.cpp
	@mkdir -p .temp/devfw
	@mydefs=""; \
	if [ "$(findstring amboot,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_AMBOOT__"; \
	fi; \
	if [ "$(findstring bld,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BLD__"; \
	fi; \
	if [ "$(findstring hal,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_HAL__"; \
	fi; \
	if [ "$(findstring pba,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_PBA__"; \
	fi; \
	if [ "$(findstring kernel,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_KERNEL__"; \
	fi; \
	if [ "$(findstring secondary,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SECONDARY__"; \
	fi; \
	if [ "$(findstring backup,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BACKUP__"; \
	fi; \
	if [ "$(findstring ramdisk,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_RAMDISK__"; \
	fi; \
	if [ "$(findstring romfs,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ROMFS__"; \
	fi; \
	if [ "$(findstring dsp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_DSP__"; \
	fi; \
	if [ "$(findstring lnx,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_LNX__"; \
	fi; \
	if [ "$(findstring swp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SWP__"; \
	fi; \
	if [ "$(findstring add,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADD__"; \
	fi; \
	if [ "$(findstring adc,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADC__"; \
	fi; \
	echo $(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@; \
	$(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@

.temp/memfwprog/%.lds: $(TOP)/src/bld/memfwprog.lds.cpp
	@mkdir -p .temp/memfwprog
	@mydefs=""; \
	if [ "$(findstring amboot,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_AMBOOT__"; \
	fi; \
	if [ "$(findstring bld,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BLD__"; \
	fi; \
	if [ "$(findstring hal,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_HAL__"; \
	fi; \
	if [ "$(findstring pba,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_PBA__"; \
	fi; \
	if [ "$(findstring kernel,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_KERNEL__"; \
	fi; \
	if [ "$(findstring secondary,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SECONDARY__"; \
	fi; \
	if [ "$(findstring backup,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BACKUP__"; \
	fi; \
	if [ "$(findstring ramdisk,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_RAMDISK__"; \
	fi; \
	if [ "$(findstring romfs,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ROMFS__"; \
	fi; \
	if [ "$(findstring dsp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_DSP__"; \
	fi; \
	if [ "$(findstring lnx,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_LNX__"; \
	fi; \
	if [ "$(findstring swp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SWP__"; \
	fi; \
	if [ "$(findstring add,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADD__"; \
	fi; \
	if [ "$(findstring adc,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADC__"; \
	fi; \
	echo $(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@; \
	$(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@

# Temp. assembler file targets

.temp/header_%.S: $(TOP)/src/bld/header.S
	@mkdir -p .temp
	@mydefs=""; \
	if [ "$(findstring amboot,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_AMBOOT__"; \
	fi; \
	if [ "$(findstring bld,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BLD__"; \
	fi; \
	if [ "$(findstring hal,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_HAL__"; \
	fi; \
	if [ "$(findstring pba,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_PBA__"; \
	fi; \
	if [ "$(findstring kernel,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_KERNEL__"; \
	fi; \
	if [ "$(findstring secondary,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SECONDARY__"; \
	fi; \
	if [ "$(findstring backup,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_BACKUP__"; \
	fi; \
	if [ "$(findstring ramdisk,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_RAMDISK__"; \
	fi; \
	if [ "$(findstring romfs,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ROMFS__"; \
	fi; \
	if [ "$(findstring dsp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_DSP__"; \
	fi; \
	if [ "$(findstring lnx,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_LNX__"; \
	fi; \
	if [ "$(findstring swp,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_SWP__"; \
	fi; \
	if [ "$(findstring add,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADD__"; \
	fi; \
	if [ "$(findstring adc,$@)" != "" ]; then \
		mydefs="$$mydefs -D__LINK_ADC__"; \
	fi; \
	echo $(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@; \
	$(CROSS)$(CPP) $(CFLAGS_DEBUG) -D__BSP_$(BSP)__ -D__ASM__ $$mydefs $< | sed /^#/d > $@

#
# Firmware object files
#

ifeq ($(MUL_BST_ENABLE),yes)
ifeq ($(BUILD_AMBPROM),y)
$(error FIXME: multiple BST for eeprom!)
endif
.temp/$(BST_DEBUG).fw: $(foreach i,$(BST_DEBUG_BINS),.temp/$(subst .bin,.fw,$(i)))
	@cat $^ > $@
	@$(ECHO_OCP) $(CROSS)$(OBJCOPY) -I binary -B arm -O elf32-littlearm \
		--rename-section .data=.text $@ $@

.temp/amboot_bst_%_debug.fw: amboot_bst_%_debug.bin $(TOP)/$(BST_PIGGY) \
		$(TOP)/$(BST_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/$(BST_VIF) \
		-DINCBIN=$< \
		-c $(TOP)/$(BST_PIGGY) -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O binary $@ $@

.temp/$(BST_RELEASE).fw: $(foreach i,$(BST_RELEASE_BINS),.temp/$(subst .bin,.fw,$(i)))
	@cat $^ > $@
	@$(ECHO_OCP) $(CROSS)$(OBJCOPY) -I binary -B arm -O elf32-littlearm \
		--rename-section .data=.text $@ $@

.temp/amboot_bst_%_release.fw: amboot_bst_%_release.bin $(TOP)/$(BST_PIGGY) \
		$(TOP)/$(BST_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/$(BST_VIF) \
		-DINCBIN=$< \
		-c $(TOP)/$(BST_PIGGY) -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O binary $@ $@

else
.temp/$(BST_DEBUG).fw: $(BST_DEBUG).bin $(TOP)/$(BST_PIGGY) \
		$(TOP)/$(BST_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/$(BST_VIF) \
		-DINCBIN=$< \
		-c $(TOP)/$(BST_PIGGY) -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

.temp/$(BST_RELEASE).fw: $(BST_RELEASE).bin $(TOP)/$(BST_PIGGY) \
		$(TOP)/$(BST_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/$(BST_VIF) \
		-DINCBIN=$< \
		-c $(TOP)/$(BST_PIGGY) -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@
endif

.temp/amboot_bld_debug.fw: amboot_bld_debug.bin $(TOP)/src/bld/piggy_amboot_bld.S \
		$(TOP)/src/bld/version.info $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/src/bld/version.info \
		-DINCBIN=$< \
		-c $(TOP)/src/bld/piggy_amboot_bld.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

.temp/amboot_bld_release.fw: amboot_bld_release.bin $(TOP)/src/bld/piggy_amboot_bld.S \
		$(TOP)/src/bld/version.info $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		-DVERSION_INFO=$(TOP)/src/bld/version.info \
		-DINCBIN=$< \
		-c $(TOP)/src/bld/piggy_amboot_bld.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

ifdef __HAS_HAL__
ifdef HAL_VIF
HAL_VIF_DEF =		-DVERSION_INFO=$(HAL_VIF)
else
HAL_VIF_DEF =
endif

.temp/hal.fw: $(HAL) $(TOP)/src/bld/piggy_hal.S \
		 $(HAL_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(HAL_VIF_DEF) \
		-DINCBIN=$(HAL) \
		-c $(TOP)/src/bld/piggy_hal.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/hal.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_hal.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_PBA__
ifdef PBA_VIF
PBA_VIF_DEF =		-DVERSION_INFO=$(PBA_VIF)
else
PBA_VIF_DEF =
endif

.temp/pba.fw: $(PBA) $(TOP)/src/bld/piggy_pba.S \
		 $(PBA_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(PBA_VIF_DEF) \
		-DINCBIN=$(PBA) \
		-c $(TOP)/src/bld/piggy_pba.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/pba.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_pba.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_KERNEL__
ifdef KERNEL_VIF
KERNEL_VIF_DEF =	-DVERSION_INFO=$(KERNEL_VIF)
else
KERNEL_VIF_DEF =
endif

.temp/kernel.fw: $(KERNEL) $(TOP)/src/bld/piggy_kernel.S \
		 $(KERNEL_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(KERNEL_VIF_DEF) \
		-DINCBIN=$(KERNEL) \
		-c $(TOP)/src/bld/piggy_kernel.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/kernel.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_kernel.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_SECONDARY__
ifdef SECONDARY_VIF
SECONDARY_VIF_DEF =	-DVERSION_INFO=$(SECONDARY_VIF)
else
SECONDARY_VIF_DEF =
endif

.temp/secondary.fw: $(SECONDARY) $(TOP)/src/bld/piggy_secondary.S \
		 $(SECONDARY_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(SECONDARY_VIF_DEF) \
		-DINCBIN=$(SECONDARY) \
		-c $(TOP)/src/bld/piggy_secondary.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/secondary.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_secondary.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_BACKUP__
ifdef BACKUP_VIF
BACKUP_VIF_DEF =	-DVERSION_INFO=$(BACKUP_VIF)
else
BACKUP_VIF_DEF =
endif

.temp/backup.fw: $(BACKUP) $(TOP)/src/bld/piggy_backup.S \
		 $(BACKUP_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(BACKUP_VIF_DEF) \
		-DINCBIN=$(BACKUP) \
		-c $(TOP)/src/bld/piggy_backup.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/backup.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_backup.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_RAMDISK__
ifdef RAMDISK_VIF
RAMDISK_VIF_DEF =	-DVERSION_INFO=$(RAMDISK_VIF)
else
RAMDISK_VIF_DEF =
endif

.temp/ramdisk.fw: $(RAMDISK) $(TOP)/src/bld/piggy_ramdisk.S \
		$(RAMDISK_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(RAMDISK_VIF_DEF) \
		-DINCBIN=$(RAMDISK) \
		-c $(TOP)/src/bld/piggy_ramdisk.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/ramdisk.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_ramdisk.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_ROMFS__
ifdef ROMFS_VIF
ROMFS_VIF_DEF =	-DVERSION_INFO=$(ROMFS_VIF)
else
ROMFS_VIF_DEF =
endif
ifneq ($(CREATE_ROMFS_FW),)
ROMFS_CONFIG_FILE := $(shell echo $(ROMFS_CONFIG_FILE))

# seperate file and arguments when using shell script as ROMFS_CONFIG_FILE.
ROMFS_CONFIG :=	$(shell echo $(ROMFS_CONFIG_FILE) | awk '{print $$1}')
ROMFS :=		romfs.bin
$(ROMFS): $(ROMFS_CONFIG) $(HOST_UTILS)

# If build_romfs.sh is selected as ROMFS_CONFIG_FILE,
# that will be executed to outpt the specified romfs.spec

ifeq ($(findstring build_romfs.sh, $(ROMFS_CONFIG)),build_romfs.sh)
	./$(ROMFS_CONFIG_FILE)
	@cp $(subst build_romfs.sh,romfs.spec,$(ROMFS_CONFIG)) .romfs_config
	./host_romfs_gen .romfs_config $(ROMFS) || exit 1
	@rm -f $(subst build_romfs.sh,romfs.spec,$(ROMFS_CONFIG_FILE))
	@rm -f .romfs_config

else

ifeq ($(findstring /,$(ROMFS_CONFIG_FILE)),)
	./host_romfs_gen $(ROMFS_CONFIG_FILE) $(ROMFS)
else
	@cp $(ROMFS_CONFIG_FILE) .romfs_config
	./host_romfs_gen .romfs_config $(ROMFS) || exit 1
	@rm -f .romfs_config
endif
endif
endif

.temp/romfs.fw: $(ROMFS) $(TOP)/src/bld/piggy_romfs.S \
		$(ROMFS_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(ROMFS_VIF_DEF) \
		-DINCBIN=$(ROMFS) \
		-c $(TOP)/src/bld/piggy_romfs.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/romfs.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_romfs.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_DSP__
ifdef DSP_VIF
DSP_VIF_DEF =	-DVERSION_INFO=$(DSP_VIF)
else
DSP_VIF_DEF =
endif
ifneq ($(CREATE_DSP_FW),)
ifneq ($(USE_COMPRESSED_DSP_FW),)
DSP_BINIMG =	uc_payload_compressed.bin
else
DSP_BINIMG =	uc_payload.bin
endif
else
DSP_BINIMG =	$(DSP)
endif

uc_payload.bin: uc_payload.elf
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -S -O binary $< $@

ifeq ($(DSP_MAIN_IMG),)

uc_payload.elf: $(TOP)/src/bld/uc_payload.S $(HOST_UTILS) \
		$(DSP_CODE_IMG) $(DSP_MEMD_IMG) $(DSP_DATA_IMG)
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCODE_BIN=$(DSP_CODE_IMG) \
		-DCODE_LEN=$(word 2,$(shell ./host_crc32 $(DSP_CODE_IMG))) \
		-DCODE_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_CODE_IMG))) \
		-DMEMD_BIN=$(DSP_MEMD_IMG) \
		-DMEMD_LEN=$(word 2,$(shell ./host_crc32 $(DSP_MEMD_IMG))) \
		-DMEMD_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_MEMD_IMG))) \
		-DDATA_BIN=$(DSP_DATA_IMG) \
		-DDATA_LEN=$(word 2,$(shell ./host_crc32 $(DSP_DATA_IMG))) \
		-DDATA_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_DATA_IMG))) \
		-c $(TOP)/src/bld/uc_payload.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

uc_payload.elf: $(TOP)/src/bld/uc_payload.S $(HOST_UTILS) \
		$(DSP_MAIN_IMG) $(DSP_SUB0_IMG) $(DSP_SUB1_IMG) $(DSP_DATA_IMG) $(DSP_AORC_IMG)
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DMAIN_BIN=$(DSP_MAIN_IMG) \
		-DMAIN_LEN=$(word 2,$(shell ./host_crc32 $(DSP_MAIN_IMG))) \
		-DMAIN_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_MAIN_IMG))) \
		-DSUB0_BIN=$(DSP_SUB0_IMG) \
		-DSUB0_LEN=$(word 2,$(shell ./host_crc32 $(DSP_SUB0_IMG))) \
		-DSUB0_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_SUB0_IMG))) \
		-DSUB1_BIN=$(DSP_SUB1_IMG) \
		-DSUB1_LEN=$(word 2,$(shell ./host_crc32 $(DSP_SUB1_IMG))) \
		-DSUB1_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_SUB1_IMG))) \
		-DDATA_BIN=$(DSP_DATA_IMG) \
		-DDATA_LEN=$(word 2,$(shell ./host_crc32 $(DSP_DATA_IMG))) \
		-DDATA_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_DATA_IMG))) \
		-DAORC_BIN=$(DSP_AORC_IMG) \
		-DAORC_LEN=$(word 2,$(shell ./host_crc32 $(DSP_AORC_IMG))) \
		-DAORC_CRC32=$(word 3,$(shell ./host_crc32 $(DSP_AORC_IMG))) \
		-c $(TOP)/src/bld/uc_payload.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

uc_payload_compressed.bin: uc_payload.bin
	gzip -9 -c $< > $@

.temp/dsp.fw: $(DSP_BINIMG) $(TOP)/src/bld/piggy_dsp.S \
		$(DSP_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(DSP_VIF_DEF) \
		-DINCBIN=$(DSP_BINIMG) \
		-c $(TOP)/src/bld/piggy_dsp.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/dsp.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_dsp.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_LNX__
ifdef LNX_VIF
LNX_VIF_DEF =		-DVERSION_INFO=$(LNX_VIF)
else
LNX_VIF_DEF =
endif

.temp/lnx.fw: $(LNX) $(TOP)/src/bld/piggy_lnx.S \
		 $(LNX_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(LNX_VIF_DEF) \
		-DINCBIN=$(LNX) \
		-c $(TOP)/src/bld/piggy_lnx.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/lnx.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_lnx.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_SWP__
ifdef SWP_VIF
SWP_VIF_DEF =		-DVERSION_INFO=$(SWP_VIF)
else
SWP_VIF_DEF =
endif

.temp/swp.fw: $(SWP) $(TOP)/src/bld/piggy_swp.S \
		 $(SWP_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(SWP_VIF_DEF) \
		-DINCBIN=$(SWP) \
		-c $(TOP)/src/bld/piggy_swp.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/swp.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_swp.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_ADD__
ifdef ADD_VIF
ADD_VIF_DEF =		-DVERSION_INFO=$(ADD_VIF)
else
ADD_VIF_DEF =
endif

.temp/add.fw: $(ADD) $(TOP)/src/bld/piggy_add.S \
		 $(ADD_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(ADD_VIF_DEF) \
		-DINCBIN=$(ADD) \
		-c $(TOP)/src/bld/piggy_add.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/add.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_add.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

ifdef __HAS_ADC__
ifdef ADC_VIF
ADC_VIF_DEF =		-DVERSION_INFO=$(ADC_VIF)
else
ADC_VIF_DEF =
endif

.temp/adc.fw: $(ADC) $(TOP)/src/bld/piggy_adc.S \
		 $(ADC_VIF) $(HOST_UTILS)
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-DCRC32=$(word 3,$(shell ./host_crc32 $<)) \
		-DIMG_LEN=$(word 2,$(shell ./host_crc32 $<)) \
		-D__YEAR__=$(YEAR) \
		-D__MONTH__=$(MONTH) \
		-D__DAY__=$(DAY) \
		$(ADC_VIF_DEF) \
		-DINCBIN=$(ADC) \
		-c $(TOP)/src/bld/piggy_adc.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

else

.temp/adc.fw:
	@mkdir -p .temp
	$(ECHO_GCC) $(CROSS)$(CC) $(AFLAGS) \
		-c $(TOP)/src/bld/piggy_adc.S -o $@
	$(ECHO_OCP) $(CROSS)$(OBJCOPY) -j .text -O elf32-littlearm $@ $@

endif

endif

